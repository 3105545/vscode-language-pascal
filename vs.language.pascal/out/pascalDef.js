/// based on vs.language.java
'use strict';
define(["require", "exports"], function (require, exports) {
    exports.language = {
        displayName: 'Pascal',
        name: 'pascal',
        mimeTypes: [],
        defaultToken: '',
        lineComment: '//',
        blockCommentStart: '(*\n',
        blockCommentEnd: '\n*)',
        // the default separators except `@$`
        wordDefinition: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
        autoClosingPairs: [
            ['"', '"'],
            ['\'', '\''],
            ['{', '}'],
            ['[', ']'],
            ['(', ')'],
        ],
        editorOptions: { tabSize: 2, insertSpaces: true },
        keywords: [
            'absolute',
            'abstract',
            'all',
            'and',
            'and_then',
            'array',
            'as',
            'asm',
            'attribute',
            'begin',
            'bindable',
            'case',
            'class',
            'const',
            'constructor',
            'default',
            'destructor',
            'div',
            'do',
            'do',
            'else',
            'end',
            'except',
            'export',
            'exports',
            'external',
            'far',
            'file',
            'finalization',
            'finally',
            'for',
            'forward',
            'function',
            'generic',
            'goto',
            'if',
            'implementation',
            'implements',
            'import',
            'in',
            'index',
            'inherited',
            'initialization',
            'interface',
            'interrupt',
            'is',
            'label',
            'library',
            'mod',
            'module',
            'name',
            'near',
            'nil',
            'not',
            'object',
            'of',
            'only',
            'operator',
            'or',
            'or_else',
            'otherwise',
            'override',
            'packed',
            'pow',
            'private',
            'procedure',
            'program',
            'property',
            'protected',
            'public',
            'published',
            'qualified',
            'read',
            'record',
            'repeat',
            'resident',
            'restricted',
            'segment',
            'set',
            'shl',
            'shr',
            'specialize',
            'stored',
            'then',
            'to',
            'try',
            'type',
            'unit',
            'until',
            'uses',
            'value',
            'var',
            'view',
            'virtual',
            'dynamic',
            'overload',
            'reintroduce',
            'while',
            'with',
            'write',
            'xor'
        ],
        operators: [
            '=',
            '>',
            '<',
            '!',
            '~',
            '?',
            ':',
            ':=',
            '+',
            '-',
            '*',
            '/',
            '&',
            '|',
            '^',
            '%',
            '@',
            '<<',
            '>>'
        ],
        // we include these common regular expressions
        symbols: /[=><!~?:&|+\-*\/\^%]+/,
        escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
        // The main tokenizer for our languages
        tokenizer: {
            root: [
                [/[a-zA-Z_$][\w$]*/, { cases: { '@keywords': { token: 'keyword.$0' }, '@default': 'identifier' } }],
                { include: '@whitespace' },
                [/[{}()\[\]]/, '@brackets'],
                [/[<>](?!@symbols)/, '@brackets'],
                [/@symbols/, { cases: { '@operators': 'delimiter', '@default': '' } }],
                [/@\s*[a-zA-Z_\$][\w\$]*/, 'annotation'],
                [/\d*\d+[eE]([\-+]?\d+)?[fFdD]?/, 'number.float'],
                [/\d*\.\d+([eE][\-+]?\d+)?[fFdD]?/, 'number.float'],
                [/0[xX][0-9a-fA-F_]*[0-9a-fA-F][Ll]?/, 'number.hex'],
                [/0[0-7_]*[0-7][Ll]?/, 'number.octal'],
                [/0[bB][0-1_]*[0-1][Ll]?/, 'number.binary'],
                [/\d+[fFdD]/, 'number.float'],
                [/\d+[lL]?/, 'number'],
                [/[;,.]/, 'delimiter'],
                [/'([^'\\]|\\.)*$/, 'string.invalid'],
                [/'/, 'string', '@string'],
                [/'[^\\']'/, 'string'],
                [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],
                [/'/, 'string.invalid']
            ],
            whitespace: [
                [/[ \t\r\n]+/, ''],
                [/\/\*(?!\/)/, 'comment.doc', '@pasdoc'],
                [/\(\*/, 'comment', '@comment'],
                [/\/\/.*$/, 'comment'],
            ],
            comment: [
                [/[^\(*]+/, 'comment'],
                [/\(\*/, 'comment.invalid'],
                [/\*\)/, 'comment', '@pop'],
                [/[\(*]/, 'comment']
            ],
            //Identical copy of comment above, except for the addition of .doc
            pasdoc: [
                [/[^\(*]+/, 'comment.doc'],
                [/\(\*/, 'comment.doc.invalid'],
                [/\*\)/, 'comment.doc', '@pop'],
                [/[\(*]/, 'comment.doc']
            ],
            string: [
                [/[^\\']+/, 'string'],
                [/@escapes/, 'string.escape'],
                [/\\./, 'string.escape.invalid'],
                [/'/, 'string', '@pop']
            ],
        },
    };
});
